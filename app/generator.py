import re
import time
import random
from typing import Dict, Any, List, Tuple

DEFAULT_TZ = "Africa/Algiers"

def _uid(prefix: str) -> str:
    # n8n يستعمل أحيانًا UUID، بس سترينغ فريد يكفي
    return f"{prefix}_{int(time.time()*1000)}_{random.randint(1000,9999)}"

def _parse_time(prompt: str) -> Tuple[int, int]:
    """
    استخراج ساعة/دقيقة تقريبية من النص. افتراض 09:00 إذا غير مذكور.
    أمثلة: '08:00' أو '8:00' أو '09:30' أو 'الساعة 7'
    """
    m = re.search(r"(\d{1,2})\s*[:：]\s*(\d{2})", prompt)
    if m:
        h = max(0, min(23, int(m.group(1))))
        mi = max(0, min(59, int(m.group(2))))
        return h, mi
    m = re.search(r"الساعة\s+(\d{1,2})", prompt)
    if m:
        h = max(0, min(23, int(m.group(1))))
        return h, 0
    # كلمات مثل “كل يوم” بدون وقت → 09:00
    return 9, 0

def _needs_schedule(prompt: str) -> bool:
    """نحاول نفهم إذا المطلوب دوري (كل يوم/ساعة/أسبوع) أو يدوي."""
    return any(k in prompt for k in ["كل يوم", "كل يومٍ", "every day", "كل ساعة", "weekly", "كل اسبوع", "كل أسبوع"])

def _http_url_from_prompt(prompt: str) -> str:
    # لو فيه رابط http(s) في النص نستخدمه، وإلا نحط httpbin
    m = re.search(r"https?://[^\s]+", prompt)
    return m.group(0) if m else "https://httpbin.org/anything"

def _skeleton_nodes() -> List[Dict[str, Any]]:
    """نرجّع هيكل أولي فارغ (سيتم تعبئته)."""
    return []

def spec_to_n8n(user_prompt: str) -> Dict[str, Any]:
    """
    يحوّل وصف المستخدم إلى Workflow صالح للاستيراد في n8n.
    - إذا كان الوصف دوري: Cron → HTTP Request → Set → (Telegram نص اختياري)
    - إذا يدوي: Manual Trigger (لكن n8n لا يحتاج نود خاصة؛ نستعمل Cron disabled)
    """
    prompt = user_prompt.strip()

    nodes = []
    conns: Dict[str, Dict[str, List[List[Dict[str, Any]]]]] = {}

    x = 260  # مسافات افتراضية بين النودز على الكانفس
    y = 380

    def add(node: Dict[str, Any]) -> Dict[str, Any]:
        node["position"] = [len(nodes)*x, y]
        nodes.append(node)
        return node

    # 1) Trigger (Cron)
    cron_name = "Cron"
    cron_node = {
        "id": _uid("cron"),
        "name": cron_name,
        "type": "n8n-nodes-base.cron",
        "typeVersion": 1,
        "parameters": {},
    }

    if _needs_schedule(prompt):
        h, mi = _parse_time(prompt)
        cron_node["parameters"] = {
            "rule": {
                "interval": "custom",
                "customInterval": f"{mi} {h} * * *",
            },
            "timezone": DEFAULT_TZ,
        }
    else:
        # نخليه يشتغل يدويًا: نوقفه (n8n يحترم حالة Inactive) – المستخدم يشغّله يدوي.
        cron_node["parameters"] = {
            "rule": {"interval": "custom", "customInterval": "0 9 * * *"},
            "timezone": DEFAULT_TZ,
        }
        cron_node["disabled"] = True

    add(cron_node)

    # 2) HTTP Request
    http_name = "HTTP Request"
    http_url = _http_url_from_prompt(prompt)
    http_node = {
        "id": _uid("http"),
        "name": http_name,
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "parameters": {
            "url": http_url,
            "method": "GET",
        },
    }
    add(http_node)

    # 3) Set (صياغة رسالة/قيمة)
    set_name = "Set"
    set_node = {
        "id": _uid("set"),
        "name": set_name,
        "type": "n8n-nodes-base.set",
        "typeVersion": 2,
        "parameters": {
            "keepOnlySet": True,
            "values": {
                "string": [
                    {"name": "msg", "value": "تم التنفيذ بنجاح ✅"}
                ]
            },
        },
    }
    add(set_node)

    # مبدئيًا ما نحط نود Telegram لأن اعتماداتها تختلف عند كل مستخدم
    # لكن نحفّز المستخدم برسالة الـ Set — يقدر يضيف Node الإرسال بنفسه إن أراد.

    # connections — مهم: لازم تكون [[{...}]]
    conns[cron_name] = {
        "main": [[{"node": http_name, "type": "main", "index": 0}]]
    }
    conns[http_name] = {
        "main": [[{"node": set_name, "type": "main", "index": 0}]]
    }

    workflow = {
        "name": "Generated by Bot",
        "nodes": nodes,
        "connections": conns,
        "settings": {
            "timezone": DEFAULT_TZ
        }
    }
    return workflow
